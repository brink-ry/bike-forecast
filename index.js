"use strict";
require('dotenv').config()
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const nodemailer = require('nodemailer');

async function getForecastData() {
  try {
    const cityId = 5176517;  // id for Westlake, OH USA
    const apiKey = process.env.OPENWEATHER_API_KEY;
    
    const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&appid=${apiKey}&units=imperial`)

    return data;
  } catch (err) {
    logError( err );
  }
}

function analyzeForecastResponse( forecastResponse ) {
  const { list: forecastArray } = forecastResponse;
  let goodWeather = [];

  forecastArray.forEach( forecast => {
    // check only times within my daylight hours
    const forecastHour = new Date(forecast.dt * 1000).getUTCHours();
    if ( forecastHour >= 14 && forecastHour <= 23 ) {
      // weather.id below 800 is poor biking weather (rain, snow, etc.)
      // 800 & up are clear/cloudy skies, no rain
      if (forecast.weather[0].id >= 800) {
        goodWeather.push( forecast );
      }
    }
  });

  return goodWeather;
}

function saveForecastResponse( forecastResponse ) {
  try {
    const theForecast = JSON.stringify( forecastResponse );
    let fileName = createTimestampFilename();

    const forecastDirectory = 'forecastLogs';
    const forecastDirectoryPath = path.resolve( __dirname, forecastDirectory );
    const fullForecastPath = path.resolve( forecastDirectoryPath, fileName );

    checkForDirectory( forecastDirectoryPath );
    saveFile( fullForecastPath, theForecast );

    console.log( 'Data successfully saved to', fullForecastPath );

 } catch (err) {
   logError( err );
 }
}

function logError( errorToLog ) {
  try {
    let fileName = createTimestampFilename();
    
    const errorDirectory = 'errorLogs';
    const errorDirectoryPath = path.resolve( __dirname, errorDirectory );
    const fullErrorLogPath = path.resolve( errorDirectoryPath, fileName );
    
    checkForDirectory( errorDirectoryPath );
    saveFile( fullErrorLogPath, errorToLog );
  } catch ( err ) {
    console.error( err );
  } finally { 
    // Always output the error that was supposed to be logged, even if there was a logging error
    console.log( 'Output of logged error:' );
    console.error( errorToLog );
  }
}

function createTimestampFilename() {
  let fileName = new Date().toISOString() + '.txt';
  let regex = new RegExp( /:/, 'g' );
  fileName = fileName.replace( regex, '_' );
  
  return fileName;
}

function checkForDirectory( dirPath ) {
  if (!fs.existsSync( dirPath )) {
    fs.mkdirSync( dirPath ); 
  }
}

function saveFile( fullPath, content ) {
  fs.writeFile( fullPath, content, writeError => {
    if ( writeError ) {
      throw new Error('Error while writing to log file', fullPath);
    }
  })
}

async function sendAlertEmail( forecastArray ) {
  try {
    let emailBody = 'GOOD WEATHER FOR BIKING:\n';
    forecastArray.forEach( forecast => {
      emailBody += new Date( forecast.dt * 1000 ).toLocaleString() + '\n';
    });

    // set up email transport layer
    // User/Pass auto generated by Ethereal
    const transporter = nodemailer.createTransport({
      host: 'smtp.ethereal.email',
      port: 587,
      auth: { 
        user: 'dorcas.bernhard61@ethereal.email',
        pass: process.env.ETHEREAL_PW
      }
    });

    // send mail notification
    const email = await transporter.sendMail({
      from: '"Ryan" <ryan@example.com>',
      to: '"Biking Ry" <rybike@example.com>',
      subject: 'Good Weather Ahead',
      text: emailBody
    });

    // Currently "sending" the email with free Ethereal account
    // Email is displayed in a webpage, URL given here
    console.log( "Message sent: %s", email.messageId );
    console.log( "Preview Email URL: %s", nodemailer.getTestMessageUrl( email ));

  } catch (err) {
    logError(err);
  }
}

(async () => {
  const forecastResponse = await getForecastData();

  saveForecastResponse( forecastResponse );

  const goodWeatherArray = analyzeForecastResponse( forecastResponse );

  if ( `goodWeatherArray.length `) {
    sendAlertEmail( goodWeatherArray );
  } else {
    console.log( 'No suitable biking times found in 5 day forecast. Bummer.');
  }
})()